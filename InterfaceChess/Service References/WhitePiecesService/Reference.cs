//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace InterfaceChess.WhitePiecesService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WhitePiecesService.IWhitePieces")]
    public interface IWhitePieces {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWhitePieces/Running", ReplyAction="http://tempuri.org/IWhitePieces/RunningResponse")]
        bool Running(string pathfile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWhitePieces/Running", ReplyAction="http://tempuri.org/IWhitePieces/RunningResponse")]
        System.Threading.Tasks.Task<bool> RunningAsync(string pathfile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWhitePieces/GetFirstHit", ReplyAction="http://tempuri.org/IWhitePieces/GetFirstHitResponse")]
        System.DateTime GetFirstHit(byte nocase);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWhitePieces/GetFirstHit", ReplyAction="http://tempuri.org/IWhitePieces/GetFirstHitResponse")]
        System.Threading.Tasks.Task<System.DateTime> GetFirstHitAsync(byte nocase);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWhitePieces/SetFirstHit", ReplyAction="http://tempuri.org/IWhitePieces/SetFirstHitResponse")]
        bool SetFirstHit(byte nocase);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWhitePieces/SetFirstHit", ReplyAction="http://tempuri.org/IWhitePieces/SetFirstHitResponse")]
        System.Threading.Tasks.Task<bool> SetFirstHitAsync(byte nocase);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWhitePieces/MovePiece", ReplyAction="http://tempuri.org/IWhitePieces/MovePieceResponse")]
        bool MovePiece(byte caseDep, byte caseArr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWhitePieces/MovePiece", ReplyAction="http://tempuri.org/IWhitePieces/MovePieceResponse")]
        System.Threading.Tasks.Task<bool> MovePieceAsync(byte caseDep, byte caseArr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWhitePieces/Stop", ReplyAction="http://tempuri.org/IWhitePieces/StopResponse")]
        bool Stop();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWhitePieces/Stop", ReplyAction="http://tempuri.org/IWhitePieces/StopResponse")]
        System.Threading.Tasks.Task<bool> StopAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWhitePieces/Ping", ReplyAction="http://tempuri.org/IWhitePieces/PingResponse")]
        bool Ping();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWhitePieces/Ping", ReplyAction="http://tempuri.org/IWhitePieces/PingResponse")]
        System.Threading.Tasks.Task<bool> PingAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWhitePiecesChannel : InterfaceChess.WhitePiecesService.IWhitePieces, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WhitePiecesClient : System.ServiceModel.ClientBase<InterfaceChess.WhitePiecesService.IWhitePieces>, InterfaceChess.WhitePiecesService.IWhitePieces {
        
        public WhitePiecesClient() {
        }
        
        public WhitePiecesClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WhitePiecesClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WhitePiecesClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WhitePiecesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Running(string pathfile) {
            return base.Channel.Running(pathfile);
        }
        
        public System.Threading.Tasks.Task<bool> RunningAsync(string pathfile) {
            return base.Channel.RunningAsync(pathfile);
        }
        
        public System.DateTime GetFirstHit(byte nocase) {
            return base.Channel.GetFirstHit(nocase);
        }
        
        public System.Threading.Tasks.Task<System.DateTime> GetFirstHitAsync(byte nocase) {
            return base.Channel.GetFirstHitAsync(nocase);
        }
        
        public bool SetFirstHit(byte nocase) {
            return base.Channel.SetFirstHit(nocase);
        }
        
        public System.Threading.Tasks.Task<bool> SetFirstHitAsync(byte nocase) {
            return base.Channel.SetFirstHitAsync(nocase);
        }
        
        public bool MovePiece(byte caseDep, byte caseArr) {
            return base.Channel.MovePiece(caseDep, caseArr);
        }
        
        public System.Threading.Tasks.Task<bool> MovePieceAsync(byte caseDep, byte caseArr) {
            return base.Channel.MovePieceAsync(caseDep, caseArr);
        }
        
        public bool Stop() {
            return base.Channel.Stop();
        }
        
        public System.Threading.Tasks.Task<bool> StopAsync() {
            return base.Channel.StopAsync();
        }
        
        public bool Ping() {
            return base.Channel.Ping();
        }
        
        public System.Threading.Tasks.Task<bool> PingAsync() {
            return base.Channel.PingAsync();
        }
    }
}
