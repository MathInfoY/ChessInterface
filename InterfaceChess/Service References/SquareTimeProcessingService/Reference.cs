//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace InterfaceChess.SquareTimeProcessingService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SquareTimeProcessingService.ISquareTimeProcessingService")]
    public interface ISquareTimeProcessingService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISquareTimeProcessingService/Start", ReplyAction="http://tempuri.org/ISquareTimeProcessingService/StartResponse")]
        bool Start(string pathFile, bool ForceLoadFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISquareTimeProcessingService/Start", ReplyAction="http://tempuri.org/ISquareTimeProcessingService/StartResponse")]
        System.Threading.Tasks.Task<bool> StartAsync(string pathFile, bool ForceLoadFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISquareTimeProcessingService/Suspend", ReplyAction="http://tempuri.org/ISquareTimeProcessingService/SuspendResponse")]
        void Suspend(bool run);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISquareTimeProcessingService/Suspend", ReplyAction="http://tempuri.org/ISquareTimeProcessingService/SuspendResponse")]
        System.Threading.Tasks.Task SuspendAsync(bool run);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISquareTimeProcessingService/isFirstCaseGreaterThanSecund", ReplyAction="http://tempuri.org/ISquareTimeProcessingService/isFirstCaseGreaterThanSecundRespo" +
            "nse")]
        bool isFirstCaseGreaterThanSecund(byte FirstCase, byte SecundCase);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISquareTimeProcessingService/isFirstCaseGreaterThanSecund", ReplyAction="http://tempuri.org/ISquareTimeProcessingService/isFirstCaseGreaterThanSecundRespo" +
            "nse")]
        System.Threading.Tasks.Task<bool> isFirstCaseGreaterThanSecundAsync(byte FirstCase, byte SecundCase);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISquareTimeProcessingService/GetValue", ReplyAction="http://tempuri.org/ISquareTimeProcessingService/GetValueResponse")]
        int GetValue(byte noCase);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISquareTimeProcessingService/GetValue", ReplyAction="http://tempuri.org/ISquareTimeProcessingService/GetValueResponse")]
        System.Threading.Tasks.Task<int> GetValueAsync(byte noCase);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISquareTimeProcessingService/SetFirstHit", ReplyAction="http://tempuri.org/ISquareTimeProcessingService/SetFirstHitResponse")]
        bool SetFirstHit(byte noCase);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISquareTimeProcessingService/SetFirstHit", ReplyAction="http://tempuri.org/ISquareTimeProcessingService/SetFirstHitResponse")]
        System.Threading.Tasks.Task<bool> SetFirstHitAsync(byte noCase);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISquareTimeProcessingService/GetFirstHit", ReplyAction="http://tempuri.org/ISquareTimeProcessingService/GetFirstHitResponse")]
        System.DateTime GetFirstHit(byte nocase);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISquareTimeProcessingService/GetFirstHit", ReplyAction="http://tempuri.org/ISquareTimeProcessingService/GetFirstHitResponse")]
        System.Threading.Tasks.Task<System.DateTime> GetFirstHitAsync(byte nocase);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISquareTimeProcessingService/Ping", ReplyAction="http://tempuri.org/ISquareTimeProcessingService/PingResponse")]
        bool Ping();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISquareTimeProcessingService/Ping", ReplyAction="http://tempuri.org/ISquareTimeProcessingService/PingResponse")]
        System.Threading.Tasks.Task<bool> PingAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISquareTimeProcessingService/NewGame", ReplyAction="http://tempuri.org/ISquareTimeProcessingService/NewGameResponse")]
        bool NewGame(bool isKeepRunning);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISquareTimeProcessingService/NewGame", ReplyAction="http://tempuri.org/ISquareTimeProcessingService/NewGameResponse")]
        System.Threading.Tasks.Task<bool> NewGameAsync(bool isKeepRunning);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISquareTimeProcessingServiceChannel : InterfaceChess.SquareTimeProcessingService.ISquareTimeProcessingService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SquareTimeProcessingServiceClient : System.ServiceModel.ClientBase<InterfaceChess.SquareTimeProcessingService.ISquareTimeProcessingService>, InterfaceChess.SquareTimeProcessingService.ISquareTimeProcessingService {
        
        public SquareTimeProcessingServiceClient() {
        }
        
        public SquareTimeProcessingServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SquareTimeProcessingServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SquareTimeProcessingServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SquareTimeProcessingServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Start(string pathFile, bool ForceLoadFile) {
            return base.Channel.Start(pathFile, ForceLoadFile);
        }
        
        public System.Threading.Tasks.Task<bool> StartAsync(string pathFile, bool ForceLoadFile) {
            return base.Channel.StartAsync(pathFile, ForceLoadFile);
        }
        
        public void Suspend(bool run) {
            base.Channel.Suspend(run);
        }
        
        public System.Threading.Tasks.Task SuspendAsync(bool run) {
            return base.Channel.SuspendAsync(run);
        }
        
        public bool isFirstCaseGreaterThanSecund(byte FirstCase, byte SecundCase) {
            return base.Channel.isFirstCaseGreaterThanSecund(FirstCase, SecundCase);
        }
        
        public System.Threading.Tasks.Task<bool> isFirstCaseGreaterThanSecundAsync(byte FirstCase, byte SecundCase) {
            return base.Channel.isFirstCaseGreaterThanSecundAsync(FirstCase, SecundCase);
        }
        
        public int GetValue(byte noCase) {
            return base.Channel.GetValue(noCase);
        }
        
        public System.Threading.Tasks.Task<int> GetValueAsync(byte noCase) {
            return base.Channel.GetValueAsync(noCase);
        }
        
        public bool SetFirstHit(byte noCase) {
            return base.Channel.SetFirstHit(noCase);
        }
        
        public System.Threading.Tasks.Task<bool> SetFirstHitAsync(byte noCase) {
            return base.Channel.SetFirstHitAsync(noCase);
        }
        
        public System.DateTime GetFirstHit(byte nocase) {
            return base.Channel.GetFirstHit(nocase);
        }
        
        public System.Threading.Tasks.Task<System.DateTime> GetFirstHitAsync(byte nocase) {
            return base.Channel.GetFirstHitAsync(nocase);
        }
        
        public bool Ping() {
            return base.Channel.Ping();
        }
        
        public System.Threading.Tasks.Task<bool> PingAsync() {
            return base.Channel.PingAsync();
        }
        
        public bool NewGame(bool isKeepRunning) {
            return base.Channel.NewGame(isKeepRunning);
        }
        
        public System.Threading.Tasks.Task<bool> NewGameAsync(bool isKeepRunning) {
            return base.Channel.NewGameAsync(isKeepRunning);
        }
    }
}
